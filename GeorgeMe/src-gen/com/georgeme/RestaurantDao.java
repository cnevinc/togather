package com.georgeme;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.georgeme.Restaurant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RESTAURANT.
*/
public class RestaurantDao extends AbstractDao<Restaurant, Long> {

    public static final String TABLENAME = "RESTAURANT";

    /**
     * Properties of entity Restaurant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "description", false, "DESCRIPTION");
        public final static Property Address = new Property(2, String.class, "address", false, "ADDRESS");
        public final static Property Source = new Property(3, String.class, "source", false, "SOURCE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Latitude = new Property(6, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(7, String.class, "longitude", false, "LONGITUDE");
        public final static Property Comments = new Property(8, String.class, "comments", false, "COMMENTS");
        public final static Property Photos = new Property(9, String.class, "photos", false, "PHOTOS");
        public final static Property Price = new Property(10, String.class, "price", false, "PRICE");
        public final static Property Rating = new Property(11, String.class, "rating", false, "RATING");
        public final static Property Distance = new Property(12, String.class, "distance", false, "DISTANCE");
        public final static Property Cover = new Property(13, String.class, "cover", false, "COVER");
    };

    private DaoSession daoSession;


    public RestaurantDao(DaoConfig config) {
        super(config);
    }
    
    public RestaurantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RESTAURANT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DESCRIPTION' TEXT," + // 1: description
                "'ADDRESS' TEXT," + // 2: address
                "'SOURCE' TEXT," + // 3: source
                "'TIME' TEXT," + // 4: time
                "'NAME' TEXT," + // 5: name
                "'LATITUDE' TEXT," + // 6: latitude
                "'LONGITUDE' TEXT," + // 7: longitude
                "'COMMENTS' TEXT," + // 8: comments
                "'PHOTOS' TEXT," + // 9: photos
                "'PRICE' TEXT," + // 10: price
                "'RATING' TEXT," + // 11: rating
                "'DISTANCE' TEXT," + // 12: distance
                "'COVER' TEXT);"); // 13: cover
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RESTAURANT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Restaurant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(2, description);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(3, address);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(4, source);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(7, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(8, longitude);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(9, comments);
        }
 
        String photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(10, photos);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(11, price);
        }
 
        String rating = entity.getRating();
        if (rating != null) {
            stmt.bindString(12, rating);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(13, distance);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(14, cover);
        }
    }

    @Override
    protected void attachEntity(Restaurant entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Restaurant readEntity(Cursor cursor, int offset) {
        Restaurant entity = new Restaurant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // address
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // source
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // latitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // longitude
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // comments
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // photos
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // rating
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // distance
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // cover
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Restaurant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSource(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLatitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLongitude(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setComments(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhotos(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPrice(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRating(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDistance(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCover(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Restaurant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Restaurant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
